
Step - 1.3 Know Basic Maths 

1.Count Digits
class Solution{
    static int evenlyDivides(int N){
        int count = 0;
       int x = N;
       while(x!=0)
       {
           int rem = x%10;
           if(rem!=0 && N%rem==0)
           {
             count++; 
           }
           x /= 10;
       }
       return count;
    }
}

2. Reverse A Number

class Solution {
public:
    int reverse(int x) {
        long long res = 0;
        while(x){
            res = res*10 + x%10;
            x/=10;
        }
        return (res < INT_MIN || res > INT_MAX) ? 0 : res;
    }
};

3. Check Palindrome

class Solution {
    public boolean isPalindrome(int x) {
         if(x<0){
             return false;
         }
        else {
            int num = x;
            int rev = 0;
            while(num>0){
                rev = rev*10 + num%10;
                num = num/10;
            }
            return x == rev;
        }
    }
}

4. GCD or HCF

vector<long long>ans;
        ans.push_back((A*B)/__gcd(A,B));
        ans.push_back(__gcd(A,B));
        
        return ans;
        
5.Armstrong Numbers

class Solution {
  public:
    string armstrongNumber(int n){
       int res = 0;
       int temp = n;
       while(n){
           res+=pow(n%10,3);
           n/=10;
       }
       if(temp == res)
       return "Yes";
       return "No";
    }
};

6. Print All divisors 
class Solution
{
public:
    long long sumOfDivisors(int N)
    {
      long long sum = 0;
    for (int i = 1; i <= N; ++i)
        sum += (N / i) * i;
    return sum;
    }
};


7.Check For Prime




Step 1.4 --> 

Q1. Understand recursion by print something N times
class Solution{
    public:
    //Complete this function
    void printNos(int N)
    {
        if(N>1)
        printNos(N-1);
        cout<<N<<" ";
    }
};

Q2. Print name N times using recursion

#include <iostream>
using namespace std;
class Print {
 
public:
  Print()
  {
    cout << "Hello" << endl;
  }
};
 
int main()
{
  int N = 5;
  Print a[N];
  return 0;
}
