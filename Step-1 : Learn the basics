
Step - 1.3 Know Basic Maths 

1.Count Digits
class Solution{
    static int evenlyDivides(int N){
        int count = 0;
       int x = N;
       while(x!=0)
       {
           int rem = x%10;
           if(rem!=0 && N%rem==0)
           {
             count++; 
           }
           x /= 10;
       }
       return count;
    }
}

2. Reverse A Number

class Solution {
public:
    int reverse(int x) {
        long long res = 0;
        while(x){
            res = res*10 + x%10;
            x/=10;
        }
        return (res < INT_MIN || res > INT_MAX) ? 0 : res;
    }
};

3. Check Palindrome

class Solution {
    public boolean isPalindrome(int x) {
         if(x<0){
             return false;
         }
        else {
            int num = x;
            int rev = 0;
            while(num>0){
                rev = rev*10 + num%10;
                num = num/10;
            }
            return x == rev;
        }
    }
}

4. GCD or HCF

vector<long long>ans;
        ans.push_back((A*B)/__gcd(A,B));
        ans.push_back(__gcd(A,B));
        
        return ans;
        
5.Armstrong Numbers

class Solution {
  public:
    string armstrongNumber(int n){
       int res = 0;
       int temp = n;
       while(n){
           res+=pow(n%10,3);
           n/=10;
       }
       if(temp == res)
       return "Yes";
       return "No";
    }
};

6. Print All divisors 
class Solution
{
public:
    long long sumOfDivisors(int N)
    {
      long long sum = 0;
    for (int i = 1; i <= N; ++i)
        sum += (N / i) * i;
    return sum;
    }
};


7.Check For Prime




Step 1.4 --> 

Q1. Understand recursion by print something N times
class Solution{
    public:
    //Complete this function
    void printNos(int N)
    {
        if(N>1)
        printNos(N-1);
        cout<<N<<" ";
    }
};

Q2. Print name N times using recursion

#include <iostream>
using namespace std;
class Print {
 
public:
  Print()
  {
    cout << "Hello" << endl;
  }
};
 
int main()
{
  int N = 5;
  Print a[N];
  return 0;
}

Q3. Print 1 to N using recursion

class Solution{
    public:
    //Complete this function
    void printNos(int N)
    {
        if(N>1)
        printNos(N-1);
        cout<<N<<" ";
    }
};

Q4. Print N to 1 using recursion

void PrintReverseOrder(int N)
{
    
    if (N <= 0) {
        return;
    }
    else {
        cout << N << " ";
 
        
        PrintReverseOrder(N - 1);
    }
    
    
    Q5. Sum of first N numbers
    
    class Solution {
  public:
    long long sumOfSeries(long long N) {
        if(N == 0){
            return 0;
        }
        return N*N*N + sumOfSeries(N-1);
    }
};


Q6. Factorial of N numbers

class Solution
{
public:
long long fact(long long n)

{

    if(n==1 || n==0)

    {

        return 1;

    }

    return n*fact(n-1);

}
    vector<long long> factorialNumbers(long long N)
    {
        vector<long long> v;

      

        for(long long i=1;i<=N;i++)

        {

            if(fact(i)>N)

            {

                break;

            }

            v.push_back(fact(i));

        }

        return v;
    }
    
    Q7. Reverse an array 
    #include <bits/stdc++.h>
using namespace std;

void rev(int arr[], int size){
   int i=0; int j= size - 1;
   while(i<j){
       swap(arr[i++],arr[j--]);
   }
}

void print(int arr[] , int size){
    for(int i=0; i<size; i++){
        cout<<arr[i]<<" ";
    }
}

int main() {
int t;
   cin>>t;
while(t--){
    int n;
    cin>>n;
   int *arr=new int[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    
    //Reverse code
  rev(arr,n);
  print(arr,n);
  cout<<endl;
  
}
return 0;
}


Q8. Check if substring is palindrome or not

class Solution{
public:	
	
	
	int isPalindrome(string S)
	{
	     int  count =0;

    for(int i=0;i<S.length()/2;i++){

        if(S[i]==S[S.length()-1-i]){

            count++;

        }

    }

    if(count==S.length()/2)

    return 1;

    else

    return 0;
	}
	
	
	Q9. Fibo 
	
	class Solution
{
    //Function to return list containing first n fibonacci numbers.
    public static long[] printFibb(int n) 
    {
        long arr[]=new long[n];

         long a=1;

         long b=0;

         long c=1;

        for(int i=0;i<n;i++){

            c=a+b;

            arr[i]=c;

            a=b;

            b=c;

        }

        return arr;
    }



Counting frequency by naive approach 
#include <bits/stdc++.h>
using namespace std;
 
void countFreq(int arr[], int n)
{
    vector<bool> visited(n, false);
 
    for (int i = 0; i < n; i++) {
 
        // Skip this element if already processed
        if (visited[i] == true)
            continue;
 
        // Count frequency
        int count = 1;
        for (int j = i + 1; j < n; j++) {
            if (arr[i] == arr[j]) {
                visited[j] = true;
                count++;
            }
        }
        cout << arr[i] << " " << count << endl;
    }
}
 
int main()
{
    int arr[] = {10,5,10,15,10,5};
    int n = sizeof(arr) / sizeof(arr[0]);
    countFreq(arr, n);
    return 0;
}
