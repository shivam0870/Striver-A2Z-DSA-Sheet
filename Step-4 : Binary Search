
1. Binary Search

 public:
    int binarysearch(int arr[], int n, int k) {
        int l=0,r=n-1;
        int mid = 0;
        while(l<=r){
            mid = l + (r-l)/2;
            if(arr[mid] == k){
                return mid;
            }
            else if(arr[mid]>k){
                r=mid-1;
            }
            else {
                l=mid+1;
            }
        }
        return -1;
    }

2. Search Insert Position



//User function Template for Java

class Solution
{
    static int searchInsertK(int Arr[], int N, int k)
    {
        // code here
        int s=0;
       int e=N-1;
       while(s<=e){
           int mid=s+(e-s)/2;
           if(Arr[mid]==k){
               return mid;
           }
           else if(Arr[mid]>k){
               e=mid-1;
           }
           else{
               s=mid+1;
           }
       }
       return s;
    }
}

3. Check if Input array is sorted
bool arraySortedOrNot(int arr[], int n) {

        int i=0;

        

        while(i<n-1)

        {

            if(arr[i]>arr[i+1])

            return 0;

            else

            i++;

        }

        return 1;

    }

4. First and last occurrences of x
class GFG
{
    ArrayList<Long> find(long arr[], int n, int x)
    {
         ArrayList<Long> arrlist=new ArrayList<>();

   long first=-1;

long last=-1;

for(int i=0;i<n;i++)

{

if(arr[i]==x)

{

first=i;

break;

}

}

for(int i=n-1;i>=0;i--)

{

if(arr[i]==x)

{

last=i;

break;

}

}

arrlist.add(first);

arrlist.add(last);

return arrlist;


    }
}

5. Number of occurrence
class Solution {
    int count(int[] arr, int n, int x) {
         
        int count = 0;
        for(int i=0; i<n; i++){
            if(arr[i] == x)
            count ++;
        }
        return count;
}
}

6. Find Peak element 



/*Complete the function below*/

class Solution
{
	// Function to find the peak element
	// arr[]: input array
	// n: size of array a[]
	public int peakElement(int[] arr,int n)
    {
      
            int max=0;
      int index=0;
      for(int i=0;i<n;i++)
      {
          if(arr[i]>max)
          {
              max=arr[i];
              index=i;
          }
      }
      return index; 
      
    }
}

7. Search in a Rotated Array

class Solution
{
    int search(int A[], int l, int h, int key)
    {
        int i=0,j=A.length-1;

        while(i<=j){

            if(A[i]==key)return i;

            if(A[j]==key)return j;

            j--;i++;  }

        return -1;
    }
}

8.  Search in Rotated Array 2
     bool flag = false;
       for(int i=0; i<N; i++){
           if(A[i] == Key)
           flag = true;
       }
       if(flag)
       return true;
       return false;
    }
    
    9.
     int x =0;
      for(int i=0; i<n; i++){
          x = x^arr[i];
      }
      return x;
