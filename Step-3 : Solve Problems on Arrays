
Find the Largest element in an array
#include <bits/stdc++.h>
 
using namespace std;
int findLargestElement(int arr[], int n) {
 
  int max = arr[0];
  for (int i = 0; i < n; i++) {
    if (max < arr[i]) {
      max = arr[i];
    }
  }
  return max;
}
int main() {
  int arr1[] = {2,5,1,3,0};
  int n = 5;
  int max = findLargestElement(arr1, n);
  cout << "The largest element in the array is: " << max << endl;
 
  int arr2[] =  {8,10,5,7,9};
  n = 5;
  max = findLargestElement(arr2, n);
  cout << "The largest element in the array is: " << max<<endl;
  return 0;
}

Second Largest Element in an Array without sorting
 #include<bits/stdc++.h>
using namespace std;
void getElements(int arr[],int n)
{
    if(n==0 || n==1)
        cout<<-1<<" "<<-1<<endl;  // edge case when only one element is present in array
    int small=INT_MAX,second_small=INT_MAX;
    int large=INT_MIN,second_large=INT_MIN;
    int i;
    for(i=0;i<n;i++)
    {
        small=min(small,arr[i]);
        large=max(large,arr[i]);
    }
    for(i=0;i<n;i++)
    {
        if(arr[i]<second_small && arr[i]!=small)
            second_small=arr[i];
        if(arr[i]>second_large && arr[i]!=large)
            second_large=arr[i];
    }

    cout<<"Second smallest is "<<second_small<<endl;
    cout<<"Second largest is "<<second_large<<endl;
}
int main()
{
    int arr[]={1,2,4,6,7,5};
    int n=sizeof(arr)/sizeof(arr[0]);
    getElements(arr,n);
    return 0;
}









Check if an Array is Sorted




#include<bits/stdc++.h>

using namespace std;

bool isSorted(int arr[], int n) {
  for (int i = 1; i < n; i++) {
    if (arr[i] < arr[i - 1])
      return false;
  }

  return true;
}

int main() {

  int arr[] = {1, 2, 3, 4, 5}, n = 5;

  printf("%s", isSorted(arr, n) ? "True" : "False");

}




4. Remove duplicates from Sorted array

class Solution {
    public int removeDuplicates(int[] nums) {
        int count = 0;
       
        for (int i = 0; i < nums.length; i++) {
           
            if (i < nums.length - 1 && nums[i] == nums[i + 1]) {
                continue;
            }
           
            nums[count] = nums[i];
            count++;
        }
        return count;
    }
}

5. Left Rotate an array by one place

#include<bits/stdc++.h>

using namespace std;
void solve(int arr[], int n) {
  int temp = arr[0]; // storing the first element of array in a variable
  for (int i = 0; i < n - 1; i++) {
    arr[i] = arr[i + 1];
  }
  arr[n - 1] = temp; // assigned the value of variable at the last index
  for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }

}
int main() {
  int n=5;
  
  int arr[]= {1,2,3,4,5};
  solve(arr, n);
}

6. Left rotate by k times 
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
      // if ((n == 0) || (k <= 0))
      //       {
      //           return;
      //       }
            
            vector<int> numsCopy(n);
            for (int i = 0; i < n; i++)
            {
                numsCopy[i] = nums[i];
            }
           
            for (int i = 0; i < n; i++)
            {
                nums[(i + k)%n] = numsCopy[i];
            }
    }
};

6. Move Zeros to end

void pushZerosToEnd(int arr[], int n) {

    int last0ptr=0;

    for(int i=0;i<n;i++){

        if(arr[i]!=0){

            swap(arr[i],arr[last0ptr]);

            last0ptr++;

        }

    }

 }

7. Linear Search

#include<stdio.h>

int search(int arr[],int n,int num)
{
    int i;
    for(i=0;i<n;i++)
    {
        if(arr[i]==num)
        return i;
    }
    return -1;
}
int main()
{
    int arr[]={1,2,3,4,5};
    int num = 4;
    int n = sizeof(arr)/sizeof(arr[0]);
    int val = search(arr,n,num);
    printf("%d",val);
}

8. Find the Union and intersection of two sorted arrays

 vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        int count=0;
        int x=n+m;
        int C[x];
        merge(arr1, (arr1+ n), arr2, (arr2 + m), C);;
        sort(C,C+x);
        set<int>s1;
        for(int i:C){
            s1.insert(i);
        }
        vector<int>vec;
        for(auto i:s1){
            vec.push_back(i);
        }
        return vec;
    }

9. Find missing number in an array

class Solution {
    public int missingNumber(int[] nums) {
        
        
    //    Arrays.sort(nums);
    // int left = 0, right = nums.length, mid= (left + right)/2;
    // while(left<right){
    //     mid = (left + right)/2;
    //     if(nums[mid]>mid) right = mid;
    //     else left = mid+1;
    // }
    // return left;  
        int sum = nums.length;
    for (int i = 0; i < nums.length; i++)
        sum += i - nums[i];
    return sum;
        
    }
}

10. Subarray with given sum

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
       unordered_map<int,int> mp;
        int sum=0,ans=0;
        mp[sum] = 1;
        for(auto it:nums){
            sum += it;
            int find = sum - k;
            if(mp.find(find) != mp.end()){
                ans += mp[find];
            }
            mp[sum]++;
        }
        return ans; 
    }
};

11. Find the Missing Number
int missingNumber(int A[], int N)
{
   int total=N*(N+1)/2;

    int sum=accumulate(A,A+N-1,0);

    return total-sum;
}

12. Find the number that appears once, and other numbers twice.
class Solution{
public:	
	int search(int A[], int N){
	    unordered_map<int,int>mpp;
	    for(int i=0; i<N; i++){
	        mpp[A[i]]++;
	    }
	    int x;
	    for(auto it : mpp){
	        if(it.second == 1)
	        x=it.first;
	    }
	    return x;
	    
	    
	}
	
	13. Search an element in a 2D matrix
	
	class Solution{
public:	
	int matSearch (vector <vector <int>> &mat, int N, int M, int X)
	{
	   //if(mat == NULL or mat.length == 0 or mat[0].length == 0){
	   //    return 0;
	   //}
	   int i=0; 
	   int j= mat[0].size() - 1;
	   while(i < mat.size() and j >= 0){
	       if(mat[i][j] == X){
	           return 1;
	       }
	       else if(mat[i][j] < X){
	           i++;
	       }
	       else{
	           j--;
	       }
	   }
	   return 0;
	}
